const fn = require('../is-array')

test('is-array default behavior', () => {
  expect(fn(new Array())).toBe(true)
  expect(fn(new Array(1))).toBe(true)
  expect(fn([])).toBe(true)
  expect(fn([1])).toBe(true)

  expect(fn({})).toBe(false)
  expect(fn(Object.create(null))).toBe(false)
  expect(fn('abc')).toBe(false)
  expect(fn(0)).toBe(false)
  expect(fn(1)).toBe(false)
  expect(fn(true)).toBe(false)
  expect(fn(false)).toBe(false)
  expect(fn(null)).toBe(false)
  expect(fn(undefined)).toBe(false)
  expect(fn(NaN)).toBe(false)
  expect(fn(Infinity)).toBe(false)
  expect(fn(/./)).toBe(false)
  expect(fn(Math)).toBe(false)
  expect(fn(function() {})).toBe(false)
  expect(fn(new Date)).toBe(false)
  expect(fn(arguments)).toBe(false)
})

test('is-array check filled', () => {
  expect(fn(new Array(1), true)).toBe(true)
  expect(fn([1], true)).toBe(true)

  expect(fn(new Array(), true)).toBe(false)
  expect(fn([], true)).toBe(false)

  expect(fn({}, true)).toBe(false)
  expect(fn(Object.create(null), true)).toBe(false)
  expect(fn('abc', true)).toBe(false)
  expect(fn(0, true)).toBe(false)
  expect(fn(1, true)).toBe(false)
  expect(fn(true, true)).toBe(false)
  expect(fn(false, true)).toBe(false)
  expect(fn(null, true)).toBe(false)
  expect(fn(undefined, true)).toBe(false)
  expect(fn(NaN, true)).toBe(false)
  expect(fn(Infinity, true)).toBe(false)
  expect(fn(/./, true)).toBe(false)
  expect(fn(Math, true)).toBe(false)
  expect(fn(function() {}, true)).toBe(false)
  expect(fn(new Date, true)).toBe(false)
  expect(fn(arguments, true)).toBe(false)
})
