const fn = require('../to-number')
const test = require('tape')

test('regular', function (t) {

  var n1 = new Number(12)
  var n2 = new Number(12.3)
  var n3 = new Number(-3)
  var s1 = new String('12')
  var s2 = new String('12.3')
  var s3 = new String('-3')
  var s4 = new String('infinity')
  var s5 = new String('-Infinity')
  var s6 = new String('-1.1.')
  var s7 = new String(' 1.1 ')
  var s8 = new String('-0')
  var s9 = new String(' -infinity ')
  var s10 = new String(' -Infinity ')
  var s11 = new String(' 1e2 ')
  var s12 = new String(' -1e2 ')
  var s13 = new String(' -.0123e3 ')

  t.equal(fn(-1.1), -1.1)
  t.equal(fn(-1),   -1)
  t.equal(fn(0),    0)
  t.equal(fn(+0),   0)
  t.equal(fn(-0),   0)
  t.equal(fn(1),    1)
  t.equal(fn(1.1),  1.1)
  t.equal(fn(Number.POSITIVE_INFINITY),  Infinity)
  t.equal(fn(Number.NEGATIVE_INFINITY), -Infinity)
  t.equal(fn(Infinity),  Number.POSITIVE_INFINITY)
  t.equal(fn(-Infinity), Number.NEGATIVE_INFINITY)

  t.equal(fn(n1),   12)
  t.equal(fn(n2),   12.3)
  t.equal(fn(n3),   -3)

  t.equal(fn(s1),   12)
  t.equal(fn(s2),   12.3)
  t.equal(fn(s3),   -3)
  t.equal(fn(s4),   Infinity)
  t.equal(fn(s5),   -Infinity)
  t.equal(fn(s6),   undefined)
  t.equal(fn(s7),   1.1)
  t.equal(fn(s8),   0)
  t.equal(fn(s9),   -Infinity)
  t.equal(fn(s10),  -Infinity)
  t.equal(fn(s11),  100)
  t.equal(fn(s12),  -100)
  t.equal(fn(s13),  -12.3)

  t.equal(fn('-1.1'),      -1.1)
  t.equal(fn('-1'),        -1)
  t.equal(fn('0'),         0)
  t.equal(fn('+0'),        0)
  t.equal(fn('-0'),        0)
  t.equal(fn('1'),         1)
  t.equal(fn('1.1'),       1.1)
  t.equal(fn('+1.1'),      1.1)
  t.equal(fn(' 1.1 '),     1.1)
  t.equal(fn('1e2'),       100)
  t.equal(fn('-1e2'),      -100)
  t.equal(fn(' .0123e3 '), 12.3)
  t.equal(fn('infinity'),  Infinity)
  t.equal(fn('Infinity'),  Infinity)
  t.equal(fn('-infinity'), -Infinity)
  t.equal(fn('-Infinity'), -Infinity)

  t.equal(fn(NaN),     undefined)
  t.equal(fn('NaN'),   undefined)
  t.equal(fn('1s'),    undefined)
  t.equal(fn('--1.1'), undefined)
  t.equal(fn('-1.1.'), undefined)
  t.equal(fn('1.1.'),  undefined)
  t.equal(fn('a'),     undefined)
  t.equal(fn({a:1}),   undefined)
  t.end()
})

test('fallback', function (t) {

  var n1 = new Number(1)
  var n2 = new Number(-1)
  var n3 = new Number(NaN)
  var noop = function() {}

  t.equal(fn('a', -1.1),      -1.1)
  t.equal(fn('a', -1),        -1)
  t.equal(fn('a', 0),         0)
  t.equal(fn('a', 1),         1)
  t.equal(fn('a', 1.1),       1.1)
  t.equal(fn('a', n1),        1)
  t.equal(fn('a', n2),        -1)
  t.equal(fn('a', null),      null)
  t.equal(fn('a', Infinity),  Number.POSITIVE_INFINITY)
  t.equal(fn('a', -Infinity), Number.NEGATIVE_INFINITY)
  t.equal(fn('a', Number.POSITIVE_INFINITY), Infinity)
  t.equal(fn('a', Number.NEGATIVE_INFINITY), -Infinity)

  t.equal(fn('a', NaN),       undefined)
  t.equal(fn('a', '1'),       undefined)
  t.equal(fn('a', n3),        undefined)
  t.equal(fn('a', noop),      undefined)
  t.end()
})
